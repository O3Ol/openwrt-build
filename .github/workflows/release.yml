name: release

concurrency:
  group: build-${{ github.head_ref }}
  cancel-in-progress: true

on:
  push:
    tags:
      - "openwrt-wasmedge-*"

jobs:
  create_release:
    name: Build WasmEdge on Openwrt
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master

      - name: Space cleanup
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* adoptopenjdk* mysql* php* mongodb* dotnet* moby* snapd* || true
          sudo -E apt-get update
          sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig libtinfo5
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean

          df -h

      - name: Update feeds
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Make WasmEdge package
        run: |
          mkdir ./package/utils/WasmEdge/src
          git clone https://github.com/WasmEdge/WasmEdge ./package/utils/WasmEdge/src

      - name: Generate configuration file
        run: |
          rm -f ./.config*
          touch ./.config

          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_generic=y
          CONFIG_TARGET_BOARD="x86"
          CONFIG_TARGET_SUBTARGET="64"
          CONFIG_PACKAGE_WasmEdge=y
          EOF

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig

      - name: Make download
        run: |
          make download -j8 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h

      - name: Compile firmware
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h ./ --max-depth=1
          du -h /mnt/openwrt/ --max-depth=1 || true

#       - name: Prepare WasmEdge ipk tgz
#         run: |
#           cp $(find ./bin/packages/ -type f -name "WasmEdge*.ipk")  ./
#           tar -zcvf WasmEdge_0.10.0_x86_64-ipk.tgz  $(find ./bin/packages/ -type f -name "WasmEdge*.ipk") WasmEdge*

      - name: Prepare all generated files tgz
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/
          tar -zcvf generated_files.tgz  ./artifact

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: openwrt-wasmedge-0.10.0
          release_name: openwrt-wasmedge-0.10.0
          draft: false
          prerelease: true

#       - name: Upload WasmEdge ipk
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./WasmEdge_0.10.0_x86_64-ipk.tgz
#           asset_name: WasmEdge_0.10.0_x86_64-ipk.tgz
#           asset_content_type: application/x-tgz
          
      - name: Upload files tgz
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./generated_files.tgz
          asset_name: generated_files.tgz
          asset_content_type: application/x-tgz
